<?xml version="1.0" encoding="UTF-8" ?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" version="2.0.2">

	<!-- UNITS

		node.x ... arbitrary
		node.y ... arbitrary
					<xs:attribute name="type" use="required">
				<xs:simpleType>
					<xs:restriction base="xs:string">
						<xs:pattern value="link|node"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
		link.length ... meter
		
		add_lanes.start_pos ... meter
		add_lanes.end_pos ... meter
		
		gate.start_pos ... meter
		gate.end_pos ... meter

		roadparam.capacity 		... veh/hr/lane
		roadparam.speed 		... km/hr
		roadparam.jam_density 	... veh/km/lane
		
		max_cell_length.max_cell_length ... meter
		
		od.start_time ... seconds after midnight
		
		demand.start_time ...seconds
		demand.dt ...seconds
		
		split_node.start_time ... seconds after midnight
		split_node.dt ...seconds
		
		sensor.dt ...seconds
		
		controller.dt ...seconds
		
		target_actuator.offset ...seconds
		
		schedule_item.start_time ... seconds after midnight
		
		stages.cycle ...seconds
		stages.offset ...seconds
		
		stage.start_time ...seconds
		stage.duration ...seconds

	-->

	<!-- generics ................................................................. -->

	<xs:element name="actuator_target">
		<xs:complexType>
			<xs:attribute name="id" type="xs:long" use="required" />
			<xs:attribute name="type" use="required">
				<xs:simpleType>
					<xs:restriction base="xs:string">
						<xs:pattern value="link|node"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
		</xs:complexType>
	</xs:element>

	<xs:element name="points">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="point" minOccurs="0" maxOccurs="unbounded" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>

	<xs:element name="point">
		<xs:complexType>
			<xs:attribute name="x" type="xs:float" use="required" /> 	
			<xs:attribute name="y" type="xs:float" use="required" />    
		</xs:complexType>
	</xs:element>

	<!-- scenario ................................................................. -->

	<xs:element name="scenario">
		<xs:complexType>
			<xs:all>
                <xs:element ref="plugins" minOccurs="0" maxOccurs="1" />
				<xs:element ref="commodities" minOccurs="0" maxOccurs="1" />
				<xs:element ref="network" minOccurs="1" maxOccurs="1" />
				<xs:element ref="subnetworks" minOccurs="0" maxOccurs="1" />
				<xs:element ref="models" minOccurs="1" maxOccurs="1" />
				<xs:element ref="demands" minOccurs="0" maxOccurs="1" />
				<xs:element ref="splits" minOccurs="0" maxOccurs="1" />
				<xs:element ref="controllers" minOccurs="0" maxOccurs="1" />
				<xs:element ref="actuators" minOccurs="0" maxOccurs="1" />
				<xs:element ref="sensors" minOccurs="0" maxOccurs="1" />
			</xs:all>
		</xs:complexType>
	</xs:element>

    <!-- plugins .................................................................. -->

    <xs:element name="plugins">
        <xs:complexType>
            <xs:sequence>
                <xs:element ref="plugin" minOccurs="0" maxOccurs="unbounded" />
            </xs:sequence>
        </xs:complexType>
    </xs:element>

    <xs:element name="plugin">
        <xs:complexType>
            <xs:attribute name="name" type="xs:string" default="unnamed" />
            <xs:attribute name="folder" type="xs:string" use="required" />
            <xs:attribute name="class" type="xs:string" use="required" />
        </xs:complexType>
    </xs:element>

    <!-- network .................................................................. -->

	<xs:element name="network">
		<xs:complexType>
			<xs:all>
				<xs:element ref="nodes" minOccurs="0" />
				<xs:element ref="links" minOccurs="0" />
				<xs:element ref="roadgeoms" minOccurs="0" maxOccurs="1" />
				<xs:element ref="roadconnections" minOccurs="0" maxOccurs="1" />
				<xs:element ref="roadparams" minOccurs="0" maxOccurs="1" />
			</xs:all>
		</xs:complexType>
	</xs:element>

	<xs:element name="nodes">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="node" minOccurs="0" maxOccurs="unbounded" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>

	<xs:element name="node">
		<xs:complexType>
			<xs:attribute name="id" type="xs:long" use="required" />
			<xs:attribute name="x" type="xs:float"  />
			<xs:attribute name="y" type="xs:float"  />
		</xs:complexType>
	</xs:element>

	<xs:element name="links">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="link" minOccurs="0" maxOccurs="unbounded" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>

	<xs:element name="link">
		<xs:complexType>
			<xs:all>
				<xs:element ref="points" minOccurs="0" maxOccurs="1" />
			</xs:all>
			<xs:attribute name="id" type="xs:long" use="required" />
			<!-- meters -->
			<xs:attribute name="length" type="xs:float" use="required" /> 		
			<!-- number of lanes of length -->
			<xs:attribute name="full_lanes" type="xs:int" use="required" />
			<xs:attribute name="start_node_id" type="xs:long" use="required" />
			<xs:attribute name="end_node_id" type="xs:long" use="required" />
			<xs:attribute name="roadparam" type="xs:long" use="required" />
			<xs:attribute name="roadgeom" type="xs:long"  />
			<!--<xs:attribute name="road_type" type="xs:string"  />-->

			<xs:attribute name="road_type" >
				<xs:simpleType>
					<xs:restriction base="xs:string">
						<xs:pattern value="onramp|offramp|freeway|arterial|hov|interconnect|source|sink|lightrail"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>


		</xs:complexType>
	</xs:element>

	<!-- roadgeoms ................................................................ -->

	<xs:element name="roadgeoms">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="roadgeom" minOccurs="0" maxOccurs="unbounded" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>

	<xs:element name="roadgeom">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="add_lanes" minOccurs="0"  maxOccurs="unbounded" />
			</xs:sequence>
			<xs:attribute name="id" type="xs:long" use="required" />
		</xs:complexType>
	</xs:element>

	<xs:element name="add_lanes">
		<xs:complexType>

			<xs:all>
				<xs:element ref="gates" minOccurs="0" />
			</xs:all>

            <!-- Used when there are no gates on a managed lane, to specify open versus prohibited acces -->
            <xs:attribute name="isopen" type="xs:boolean"  default="true"/>

			<!-- inside or outside lanes -->
			<xs:attribute name="side" use="required">
				<xs:simpleType>
					<xs:restriction base="xs:string">
						<xs:pattern value="in|out"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>

			<!-- upstream or downstream lanes -->
			<xs:attribute name="pos" use="required">
				<xs:simpleType>
					<xs:restriction base="xs:string">
						<xs:pattern value="up|dn"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>

			<!-- Unspecified length means the addlane extends the length of the link -->
			<xs:attribute name="length" type="xs:float"/>

			<xs:attribute name="lanes" type="xs:int" default="1" />

		</xs:complexType>
	</xs:element>

	<xs:element name="gates">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="gate" minOccurs="0" maxOccurs="unbounded" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>

	<xs:element name="gate">
		<xs:complexType>
			<!-- meters -->
			<xs:attribute name="start_pos" type="xs:float" use="required" />   
			<xs:attribute name="end_pos" type="xs:float" use="required" />
		</xs:complexType>
	</xs:element>

	<!-- roadconnections .......................................................... -->

	<xs:element name="roadconnections">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="roadconnection" minOccurs="0" maxOccurs="unbounded" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>

	<xs:element name="roadconnection">
		<xs:complexType>
			<xs:attribute name="id" type="xs:long" use="required" />
            <!-- length of the road connection in meters -->
            <xs:attribute name="length" type="xs:float" default="0"/>
			<xs:attribute name="in_link" type="xs:long" use="required" />
            <!-- "1#3" -->
			<xs:attribute name="in_link_lanes" type="xs:string" />
			<xs:attribute name="out_link" type="xs:long" use="required" />
            <!-- "1#3" -->
			<xs:attribute name="out_link_lanes" type="xs:string" />
		</xs:complexType>
	</xs:element>

	<!-- roadparams ............................................................... -->

	<xs:element name="roadparams">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="roadparam" minOccurs="0" maxOccurs="unbounded" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>

	<xs:element name="roadparam">
		<xs:complexType>
			<xs:attribute name="name" type="xs:string" />
			<xs:attribute name="id" type="xs:long" use="required" />
			<!-- in veh/hr/lane -->
			<xs:attribute name="capacity" type="xs:float" use="required" />
			<!-- in km/hr -->
			<xs:attribute name="speed" type="xs:float" use="required" />
			<!-- in veh/km/lane -->
			<xs:attribute name="jam_density" type="xs:float" use="required" />
		</xs:complexType>
	</xs:element>

	<!-- model .................................................................... -->

	<xs:element name="models">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="model" minOccurs="0" maxOccurs="unbounded" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>

	<xs:element name="model">
		<xs:complexType>
			<xs:all>
				<xs:element ref="model_params" minOccurs="0" />
			</xs:all>
			<xs:attribute name="type" type="xs:string" use="required" />
			<xs:attribute name="name" type="xs:string" use="required" />
			<xs:attribute name="links" type="xs:string" />
			<xs:attribute name="process" type="xs:string" />
			<xs:attribute name="is_default" type="xs:boolean" default="false" />
		</xs:complexType>
	</xs:element>

	<xs:element name="model_params">
		<xs:complexType mixed="true">
			<!-- ctm, mn ......................... -->

			<!-- seconds -->
			<xs:attribute name="sim_dt" type="xs:float" />

			<!-- meters -->
			<xs:attribute name="max_cell_length" type="xs:float" />
		</xs:complexType>
	</xs:element>
	
	<!-- commodities .............................................................. -->

	<xs:element name="commodities">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="commodity" minOccurs="1" maxOccurs="unbounded" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>

	<xs:element name="commodity">
		<xs:complexType>
			<xs:attribute name="id" type="xs:long" use="required" />
			<xs:attribute name="name" type="xs:string" use="required" />

			<!-- comma-separated list of subnetwork ids for this commodity.
			The default is the entire network. Pathfull commodities are only allowed 
			subnetworks that are paths. -->
			<xs:attribute name="subnetworks" type="xs:string"  />

			<!-- true if the demands are specified per path and the vehicles remember their
			path from origin to destination. false if vehicles follow a probabilistic path
			defined by split ratios. -->
			<xs:attribute name="pathfull" type="xs:boolean"  default="false" />
		</xs:complexType>
	</xs:element>

	<!-- subnetworks .............................................................. -->

	<xs:element name="subnetworks">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="subnetwork" minOccurs="0" maxOccurs="unbounded" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>

	<xs:element name="subnetwork">
		<xs:complexType mixed="true">
			<xs:attribute name="id" type="xs:long" use="required"/>
			<xs:attribute name="name" type="xs:string" />
		</xs:complexType>
	</xs:element>

	<!-- demands .................................................................. -->

	<xs:element name="demands">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="demand" minOccurs="0" maxOccurs="unbounded" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>

	<xs:element name="demand">
		<!-- the contents of this element is a comma-separated time series of demand
        flows in vehicles per second (total, not per lane) -->
		<xs:complexType mixed="true">

			<xs:attribute name="commodity_id" type="xs:long" use="required" />

			<!-- Note: either link_id or subnetwork must be provided. -->

			<!-- use this for demands for pathless commodities. -->
			<xs:attribute name="link_id" type="xs:long"  />

			<!-- Specify a subnetwork for this demand if the commodity is pathfull. Otherwise, for
			pathless commodities, use link_id". The subnetwork must be listed in those allowed to 
			this commodity (hence, it must be a path). 
			These path demands will induce splits at intersections of paths, which will be used fo
			macro states. 
			 -->
			<xs:attribute name="subnetwork" type="xs:long"  />

			<!-- time stamp in seconds after midnight -->
			<xs:attribute name="start_time" type="xs:float"  default="0" />

			<!-- time step in seconds -->
			<xs:attribute name="dt" type="xs:float"  />
		</xs:complexType>
	</xs:element>

	<!-- splits ................................................................... -->

	<xs:element name="splits">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="split_node" minOccurs="0" maxOccurs="unbounded" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>

	<xs:element name="split_node">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="split" minOccurs="0" maxOccurs="unbounded" />
			</xs:sequence>
			<xs:attribute name="node_id" type="xs:long" use="required" />
			<xs:attribute name="commodity_id" type="xs:long" use="required" />
			<xs:attribute name="link_in" type="xs:long" use="required" />
			<!-- time stamp in seconds after midnight -->
			<xs:attribute name="start_time" type="xs:float"  default="0"/>
			<!-- time step in seconds -->
			<xs:attribute name="dt" type="xs:float"  />
		</xs:complexType>
	</xs:element>

	<xs:element name="split">

		<!-- the content of this element is a comma-separated time series of split values -->
		<xs:complexType mixed="true">
			<xs:attribute name="link_out" type="xs:long" use="required" />
		</xs:complexType>
	</xs:element>

	<!-- actuators ................................................................ -->

	<xs:element name="actuators">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="actuator" minOccurs="0" maxOccurs="unbounded" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>

	<xs:element name="actuator">
		<xs:complexType>
			<xs:all>
				<xs:element ref="actuator_target" minOccurs="1" maxOccurs="1" />
				<xs:element ref="signal" minOccurs="0" maxOccurs="1" />
			</xs:all>
			<xs:attribute name="id" type="xs:long" use="required"/>
			<xs:attribute name="type" use="required">
				<xs:simpleType>
					<xs:restriction base="xs:string">
						<xs:pattern value="signal|signal_simple|ramp_meter|vsl|fd|capacity"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
			<!-- dt: in seconds.
			When not specified, the controller will depend on events it creates on its own.
			When provided, the update method will be automatically called every dt -->
			<xs:attribute name="dt" type="xs:float"  default="-1"/>

			<!-- saturation bounds for the actuator. Interpretation is actuator specific -->
			<xs:attribute name="min_value" type="xs:float" default="-1"/>
			<xs:attribute name="max_value" type="xs:float" default="-1"/>

		</xs:complexType>
	</xs:element>

	<!-- signal ................................................................... -->

	<xs:element name="signal">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="phase" minOccurs="0" maxOccurs="unbounded" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>

	<xs:element name="phase">
		<xs:complexType>
			<!-- comma-serparated list of road connection ids -->
			<xs:attribute name="roadconnection_ids" type="xs:string" use="required" />

			<!-- id for the phase. Suggest using the NEMA convention for phase numbering (1-8). 
			For right hand turns, suggest using the negative of the adjacent through movement 
			(e.g. nema="-2" moves with nema="2") -->
			<xs:attribute name="id" type="xs:long" use="required" />

			<!-- phasing parameters, in seconds -->
			<xs:attribute name="yellow_time" type="xs:float"  default="0" />
			<xs:attribute name="red_clear_time" type="xs:float"  default="0" />
			<xs:attribute name="min_green_time" type="xs:float"  default="0" />

			<!--
			<xs:attribute name="protected" type="xs:boolean"  default="false"/>
			<xs:attribute name="permissive" type="xs:boolean"  default="false"/>
			<xs:attribute name="lag" type="xs:boolean"  default="false"/>
			<xs:attribute name="recall" type="xs:boolean"  default="false"/> -->

		</xs:complexType>
	</xs:element>

	<!-- sensors  ................................................................. -->

	<xs:element name="sensors">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="sensor" minOccurs="0" maxOccurs="unbounded" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>

	<xs:element name="sensor">
		<xs:complexType>
			<xs:attribute name="id" type="xs:long" use="required"/>
			<xs:attribute name="data_id" type="xs:string" />
			<xs:attribute name="lanes" type="xs:string" />
			<xs:attribute name="length" type="xs:float" />

			<!-- type in {fixed} -->
			<xs:attribute name="type" use="required">
				<xs:simpleType>
					<xs:restriction base="xs:string">
						<xs:pattern value="fixed|commodity"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>

			<xs:attribute name="link_id" type="xs:long" use="required"/>
			<!-- distance in meters from the upstream edge of the link -->
			<xs:attribute name="position" type="xs:float"  default="0"/>
			<!-- sample time in seconds -->
			<xs:attribute name="dt" type="xs:float" use="required"/>
		</xs:complexType>
	</xs:element>

	<!-- control .................................................................. -->

	<xs:element name="controllers">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="controller" minOccurs="0" maxOccurs="unbounded" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>

	<xs:element name="controller">
		<xs:complexType>
			<xs:all>
				<xs:element ref="target_actuators" minOccurs="0" maxOccurs="1"/>
				<xs:element ref="feedback_sensors" minOccurs="0" maxOccurs="1" />
				<xs:element ref="schedule" minOccurs="0" maxOccurs="1" />
			</xs:all>
			<xs:attribute name="id" type="xs:long" use="required" />
			<xs:attribute name="type" type="xs:string" use="required"/>
			<!-- dt: in seconds.
			When not specified, the controller will depend on events it creates on its own.
			When provided, the update method will be automatically called every dt -->
			<xs:attribute name="dt" type="xs:float"  default="-1"/>
		</xs:complexType>
	</xs:element>

	<xs:element name="target_actuators">
		<xs:complexType>
			<!-- use this for actuators that require usage specification -->
			<xs:sequence>
				<xs:element ref="target_actuator" minOccurs="0" maxOccurs="unbounded" />
			</xs:sequence>
			<!-- use this for actuators that do not require usage specification -->
			<xs:attribute name="ids" type="xs:string"  default="" />
		</xs:complexType>
	</xs:element>

	<xs:element name="target_actuator">
		<xs:complexType>
			<xs:attribute name="id" type="xs:long" use="required" />
			<xs:attribute name="usage" type="xs:string"  />
		</xs:complexType>
	</xs:element>

	<xs:element name="feedback_sensors">
		<xs:complexType>
			<!-- use this for sensors that require usage specification -->
			<xs:sequence>
				<xs:element ref="feedback_sensor" minOccurs="0" maxOccurs="unbounded" />
			</xs:sequence>
			<!-- use this for sensors that do not require usage specification -->
			<xs:attribute name="ids" type="xs:string"  default="" />
		</xs:complexType>
	</xs:element>

	<xs:element name="feedback_sensor">
		<xs:complexType>
			<xs:attribute name="id" type="xs:long" use="required" />
			<xs:attribute name="usage" type="xs:string"  />
		</xs:complexType>
	</xs:element>

	<!-- pretimed signal control .................................................. -->

	<xs:element name="schedule">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="schedule_item" minOccurs="0" maxOccurs="unbounded" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>

	<xs:element name="schedule_item">
		<xs:complexType>
			<xs:all>
				<xs:element ref="stages" minOccurs="0" />
			</xs:all>

			<!-- seconds -->
			<xs:attribute name="cycle" type="xs:float"  default="0" />
			<!-- seconds -->
			<xs:attribute name="offset" type="xs:float"  default="0" />
			<!-- seconds after midnight -->
			<xs:attribute name="start_time" type="xs:float"  default="0" />
		</xs:complexType>
	</xs:element>

	<xs:element name="stages">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="stage" minOccurs="0" maxOccurs="unbounded" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>

	<xs:element name="stage">
		<xs:complexType>
			<xs:attribute name="order" type="xs:int" use="required" />
			<!-- comma separated list of phase ids -->
			<xs:attribute name="phases" type="xs:string" use="required" />
			<!-- seconds -->
			<xs:attribute name="duration" type="xs:float" use="required" />
		</xs:complexType>
	</xs:element>

	<!-- events ................................................................... -->

</xs:schema>

